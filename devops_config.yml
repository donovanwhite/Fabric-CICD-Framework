# Azure DevOps Git Integration Configuration
# ==========================================
# Configuration for using Azure DevOps repositories as source for Fabric CICD

# =============================================================================
# AZURE DEVOPS REPOSITORY CONFIGURATION
# =============================================================================

devops_config:
  # Your Azure DevOps organization and project details
  organization: "myorg"                    # Replace with your DevOps org name
  project: "MyFabricProject"               # Replace with your project name
  repository: "fabric-artifacts"          # Replace with your repo name
  
  # Full repository URL (auto-generated from above or specify directly)
  repository_url: "https://dev.azure.com/myorg/MyFabricProject/_git/fabric-artifacts"
  
  # Git branch configuration - CUSTOMIZE THESE FOR YOUR WORKFLOW
  branches:
    dev: "develop"                         # Development branch (change as needed)
    staging: "release/staging"             # Staging branch (change as needed)
    prod: "main"                          # Production branch (change as needed)
    # Alternative examples:
    # dev: "feature/dev"
    # staging: "release/v1.0"  
    # prod: "master"
  
  # Repository structure (where Fabric items are located)
  artifacts_path: "/"                     # Root path in repo (use "/" for root)
  parameter_file: "parameter.yml"         # Parameter file location in repo

# =============================================================================
# DEPLOYMENT ENVIRONMENT MAPPING
# =============================================================================

environment_mapping:
  # Map deployment environments to DevOps branches and target workspaces
  DEV:
    source_branch: "develop"
    workspace_id: "11111111-1111-1111-1111-111111111111"  # Replace with actual
    capacity_id: "44444444-4444-4444-4444-444444444444"   # Replace with actual
    region: "East US"
    capacity: "DEV-F2-Capacity"
    
  STAGING:
    source_branch: "release/staging"
    workspace_id: "22222222-2222-2222-2222-222222222222"  # Replace with actual
    capacity_id: "55555555-5555-5555-5555-555555555555"   # Replace with actual
    region: "Central US"
    capacity: "STAGING-F4-Capacity"
    
  PROD:
    source_branch: "main"
    workspace_id: "33333333-3333-3333-3333-333333333333"  # Replace with actual
    capacity_id: "66666666-6666-6666-6666-666666666666"   # Replace with actual
    region: "West Europe"
    capacity: "PROD-F16-Capacity"

# =============================================================================
# AZURE DEVOPS AUTHENTICATION
# =============================================================================

authentication:
  # Authentication method for Azure DevOps Git access
  method: "azure_cli"                     # Options: azure_cli, pat_token, ssh_key
  
  # Personal Access Token (if using pat_token method)
  # Store in environment variable: AZURE_DEVOPS_PAT
  pat_token_env_var: "AZURE_DEVOPS_PAT"
  
  # Required DevOps permissions:
  # - Code (read) - to clone repositories
  # - Variable Groups (read) - if using variable groups for parameters

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================

deployment:
  # Cleanup temporary repositories after deployment
  cleanup_temp_repos: true
  
  # Default deployment behavior
  default_update_mode: true               # Update existing items
  default_item_types: []                  # Empty = deploy all item types
  
  # Git clone options
  clone_depth: 1                          # Shallow clone for faster downloads
  clone_timeout: 300                      # Timeout in seconds
  
  # Validation settings
  validate_before_deploy: true            # Always validate before deployment
  require_parameter_file: true            # Require parameter.yml in repository

# =============================================================================
# FABRIC ITEM CONFIGURATION
# =============================================================================

fabric_items:
  # Supported Fabric item types for deployment
  supported_types:
    - "Notebook"
    - "Report" 
    - "Dashboard"
    - "SemanticModel"
    - "Lakehouse"
    - "Warehouse"
    - "DataPipeline"
    - "Dataflow"
    - "Environment"
    - "SQLEndpoint"
    - "KQLDatabase"
    - "KQLQueryset"
    - "Eventhouse"
    - "Eventstream"
    - "MLModel"
    - "MLExperiment"
  
  # Deployment order (items deployed in this order to handle dependencies)
  deployment_order:
    - "Environment"
    - "Lakehouse"
    - "Warehouse"
    - "SemanticModel"
    - "Notebook"
    - "DataPipeline"
    - "Dataflow"
    - "Report"
    - "Dashboard"

# =============================================================================
# EXAMPLE USAGE COMMANDS
# =============================================================================

# Deploy DEV branch to DEV environment with capacity assignment
# python fabric_deploy_devops.py --workspace-id "dev-workspace-id" --target-env DEV --repo-url "https://dev.azure.com/myorg/project/_git/repo" --branch develop --capacity-id "dev-capacity-id"

# Deploy PROD branch to PROD environment with capacity assignment
# python fabric_deploy_devops.py --workspace-id "prod-workspace-id" --target-env PROD --repo-url "https://dev.azure.com/myorg/project/_git/repo" --branch main --capacity-id "prod-capacity-id"

# Deploy specific items only with capacity
# python fabric_deploy_devops.py --workspace-id "workspace-id" --target-env PROD --repo-url "..." --capacity-id "capacity-id" --items Notebook Report

# Dry run validation with capacity info
# python fabric_deploy_devops.py --workspace-id "workspace-id" --target-env PROD --repo-url "..." --capacity-id "capacity-id" --dry-run
