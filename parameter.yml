# Microsoft Fabric CICD Parameter Configuration - v0.1.24 Compatible
# =============================================
# This file manages environment-specific values for cross-region deployment
# Compatible with fabric-cicd library v0.1.24 and all supported item types
# 
# Usage: Place this file in the root of your Git repository containing Fabric items
# Structure: /<repository-root>/parameter.yml
#
# Environments supported: DEV, STAGING, PROD (customize as needed)
# 
# PRIMARY ITEM TYPES: Notebook, DataPipeline, Environment, SemanticModel, Report
# ADDITIONAL SUPPORTED TYPES: Lakehouse, MirroredDatabase, VariableLibrary, CopyJob, 
#                             Eventhouse, KQLDatabase, KQLQueryset, Reflex, Eventstream, 
#                             Warehouse, SQLDatabase, KQLDashboard, Dataflow, GraphQLApi

# =============================================================================
# FIND AND REPLACE PARAMETERIZATION
# =============================================================================
# Use for generic string replacement across all file types
# Common use cases: Workspace IDs, Item IDs, Connection strings, URLs

find_replace:
  # =============================================================================
  # NOTEBOOK PARAMETERIZATION
  # =============================================================================
  
  # Workspace ID replacement in notebooks
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Notebook"
    file_path: "**/notebook-content.py"

  # Lakehouse ID replacement in notebooks
  - find_value: "SOURCE_LAKEHOUSE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$items.Lakehouse.DevLakehouse.id"
      STAGING: "$items.Lakehouse.StagingLakehouse.id"
      PROD: "$items.Lakehouse.ProdLakehouse.id"
    item_type: "Notebook"

  # Warehouse ID replacement in notebooks
  - find_value: "SOURCE_WAREHOUSE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$items.Warehouse.DevWarehouse.id"
      STAGING: "$items.Warehouse.StagingWarehouse.id"
      PROD: "$items.Warehouse.ProdWarehouse.id"
    item_type: "Notebook"

  # Notebook-specific connection strings for external data sources
  - find_value: "NOTEBOOK_CONNECTION_STRING_PLACEHOLDER"
    replace_value:
      DEV: "dev-notebook-connection.database.windows.net"
      STAGING: "staging-notebook-connection.database.windows.net"
      PROD: "prod-notebook-connection.database.windows.net"
    item_type: "Notebook"

  # =============================================================================
  # DATA PIPELINE PARAMETERIZATION
  # =============================================================================

  # Workspace ID replacement in data pipelines
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "DataPipeline"

  # Source system connection strings for data pipelines
  - find_value: "PIPELINE_SOURCE_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-source-system.database.windows.net"
      STAGING: "staging-source-system.database.windows.net"
      PROD: "prod-source-system.database.windows.net"
    item_type: "DataPipeline"

  # Target lakehouse ID for data pipeline destinations
  - find_value: "PIPELINE_TARGET_LAKEHOUSE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Lakehouse.DevDataLake.id"
      STAGING: "$items.Lakehouse.StagingDataLake.id"
      PROD: "$items.Lakehouse.ProdDataLake.id"
    item_type: "DataPipeline"

  # =============================================================================
  # ENVIRONMENT PARAMETERIZATION
  # =============================================================================

  # Custom library paths for environments
  - find_value: "CUSTOM_LIBRARY_PATH_PLACEHOLDER"
    replace_value:
      DEV: "/dev/libraries"
      STAGING: "/staging/libraries"
      PROD: "/prod/libraries"
    item_type: "Environment"

  # Spark configuration parameters for environments
  - find_value: "SPARK_CONFIG_PLACEHOLDER"
    replace_value:
      DEV: "spark.executor.memory=2g,spark.executor.cores=2"
      STAGING: "spark.executor.memory=4g,spark.executor.cores=4"
      PROD: "spark.executor.memory=8g,spark.executor.cores=8"
    item_type: "Environment"

  # =============================================================================
  # SEMANTIC MODEL PARAMETERIZATION
  # =============================================================================

  # Data source connection for semantic models
  - find_value: "SEMANTIC_MODEL_DATASOURCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Warehouse.DevWarehouse.id"
      STAGING: "$items.Warehouse.StagingWarehouse.id"
      PROD: "$items.Warehouse.ProdWarehouse.id"
    item_type: "SemanticModel"

  # Workspace ID for semantic models
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "SemanticModel"

  # Connection strings for external data sources in semantic models
  - find_value: "SEMANTIC_MODEL_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-semantic-source.database.windows.net"
      STAGING: "staging-semantic-source.database.windows.net"
      PROD: "prod-semantic-source.database.windows.net"
    item_type: "SemanticModel"

  # =============================================================================
  # REPORT PARAMETERIZATION
  # =============================================================================

  # Semantic model/dataset ID for reports
  - find_value: "SOURCE_DATASET_ID_PLACEHOLDER"
    replace_value:
      DEV: "$items.SemanticModel.DevDataset.id"
      STAGING: "$items.SemanticModel.StagingDataset.id"
      PROD: "$items.SemanticModel.ProdDataset.id"
    item_type: "Report"

  # Workspace ID for reports
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Report"

  # Report-specific data source connections
  - find_value: "REPORT_DATASOURCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Warehouse.DevReportWarehouse.id"
      STAGING: "$items.Warehouse.StagingReportWarehouse.id"
      PROD: "$items.Warehouse.ProdReportWarehouse.id"
    item_type: "Report"

  # =============================================================================
  # LAKEHOUSE PARAMETERIZATION
  # =============================================================================

  # Workspace ID replacement in lakehouses
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Lakehouse"

  # Storage account connections for lakehouses
  - find_value: "LAKEHOUSE_STORAGE_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "devstorageaccount.dfs.core.windows.net"
      STAGING: "stagingstorageaccount.dfs.core.windows.net"
      PROD: "prodstorageaccount.dfs.core.windows.net"
    item_type: "Lakehouse"

  # =============================================================================
  # WAREHOUSE PARAMETERIZATION
  # =============================================================================

  # Workspace ID replacement in warehouses
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Warehouse"

  # SQL endpoint connections for warehouses
  - find_value: "WAREHOUSE_SQL_ENDPOINT_PLACEHOLDER"
    replace_value:
      DEV: "dev-warehouse-endpoint.sql.azuresynapse.net"
      STAGING: "staging-warehouse-endpoint.sql.azuresynapse.net"
      PROD: "prod-warehouse-endpoint.sql.azuresynapse.net"
    item_type: "Warehouse"

  # =============================================================================
  # MIRRORED DATABASE PARAMETERIZATION
  # =============================================================================

  # Source database connection for mirrored databases
  - find_value: "MIRRORED_SOURCE_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-source-db.database.windows.net"
      STAGING: "staging-source-db.database.windows.net"
      PROD: "prod-source-db.database.windows.net"
    item_type: "MirroredDatabase"

  # Workspace ID replacement in mirrored databases
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "MirroredDatabase"

  # =============================================================================
  # EVENTHOUSE PARAMETERIZATION
  # =============================================================================

  # Workspace ID replacement in eventhouses
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Eventhouse"

  # Event source endpoint for eventhouses
  - find_value: "EVENTHOUSE_SOURCE_ENDPOINT_PLACEHOLDER"
    replace_value:
      DEV: "dev-eventhub.servicebus.windows.net"
      STAGING: "staging-eventhub.servicebus.windows.net"
      PROD: "prod-eventhub.servicebus.windows.net"
    item_type: "Eventhouse"

  # =============================================================================
  # KQL DATABASE PARAMETERIZATION
  # =============================================================================

  # Eventhouse reference for KQL databases
  - find_value: "KQL_EVENTHOUSE_REFERENCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Eventhouse.DevEventhouse.id"
      STAGING: "$items.Eventhouse.StagingEventhouse.id"
      PROD: "$items.Eventhouse.ProdEventhouse.id"
    item_type: "KQLDatabase"

  # Workspace ID replacement in KQL databases
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "KQLDatabase"

  # =============================================================================
  # KQL QUERYSET PARAMETERIZATION
  # =============================================================================

  # KQL Database reference for querysets
  - find_value: "KQL_DATABASE_REFERENCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.KQLDatabase.DevKQLDB.id"
      STAGING: "$items.KQLDatabase.StagingKQLDB.id"
      PROD: "$items.KQLDatabase.ProdKQLDB.id"
    item_type: "KQLQueryset"

  # Workspace ID replacement in KQL querysets
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "KQLQueryset"

  # =============================================================================
  # KQL DASHBOARD PARAMETERIZATION
  # =============================================================================

  # KQL Database data source for dashboards
  - find_value: "KQL_DASHBOARD_DATASOURCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.KQLDatabase.DevKQLDB.id"
      STAGING: "$items.KQLDatabase.StagingKQLDB.id"
      PROD: "$items.KQLDatabase.ProdKQLDB.id"
    item_type: "KQLDashboard"

  # Workspace ID replacement in KQL dashboards
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "KQLDashboard"

  # =============================================================================
  # EVENTSTREAM PARAMETERIZATION
  # =============================================================================

  # Event Hub connection for eventstreams
  - find_value: "EVENTSTREAM_EVENTHUB_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-eventhub-connection-string"
      STAGING: "staging-eventhub-connection-string"
      PROD: "prod-eventhub-connection-string"
    item_type: "Eventstream"

  # Destination reference for eventstreams
  - find_value: "EVENTSTREAM_DESTINATION_PLACEHOLDER"
    replace_value:
      DEV: "$items.Lakehouse.DevEventLakehouse.id"
      STAGING: "$items.Lakehouse.StagingEventLakehouse.id"
      PROD: "$items.Lakehouse.ProdEventLakehouse.id"
    item_type: "Eventstream"

  # =============================================================================
  # DATAFLOW PARAMETERIZATION
  # =============================================================================

  # Source connection for dataflows
  - find_value: "DATAFLOW_SOURCE_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-dataflow-source.database.windows.net"
      STAGING: "staging-dataflow-source.database.windows.net"
      PROD: "prod-dataflow-source.database.windows.net"
    item_type: "Dataflow"

  # Destination lakehouse for dataflows
  - find_value: "DATAFLOW_DESTINATION_LAKEHOUSE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Lakehouse.DevDataflowLakehouse.id"
      STAGING: "$items.Lakehouse.StagingDataflowLakehouse.id"
      PROD: "$items.Lakehouse.ProdDataflowLakehouse.id"
    item_type: "Dataflow"

  # =============================================================================
  # SQL DATABASE PARAMETERIZATION
  # =============================================================================

  # Connection string for SQL databases
  - find_value: "SQL_DATABASE_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-sql-server.database.windows.net"
      STAGING: "staging-sql-server.database.windows.net"
      PROD: "prod-sql-server.database.windows.net"
    item_type: "SQLDatabase"

  # Workspace ID replacement in SQL databases
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "SQLDatabase"

  # =============================================================================
  # REFLEX PARAMETERIZATION
  # =============================================================================

  # Data source connection for Reflex
  - find_value: "REFLEX_DATASOURCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Lakehouse.DevReflexLakehouse.id"
      STAGING: "$items.Lakehouse.StagingReflexLakehouse.id"
      PROD: "$items.Lakehouse.ProdReflexLakehouse.id"
    item_type: "Reflex"

  # Workspace ID replacement in Reflex
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Reflex"

  # =============================================================================
  # GRAPHQL API PARAMETERIZATION
  # =============================================================================

  # Data source connection for GraphQL APIs
  - find_value: "GRAPHQL_DATASOURCE_PLACEHOLDER"
    replace_value:
      DEV: "$items.Warehouse.DevGraphQLWarehouse.id"
      STAGING: "$items.Warehouse.StagingGraphQLWarehouse.id"
      PROD: "$items.Warehouse.ProdGraphQLWarehouse.id"
    item_type: "GraphQLApi"

  # External API endpoint for GraphQL APIs
  - find_value: "GRAPHQL_EXTERNAL_ENDPOINT_PLACEHOLDER"
    replace_value:
      DEV: "https://dev-api.example.com/graphql"
      STAGING: "https://staging-api.example.com/graphql"
      PROD: "https://prod-api.example.com/graphql"
    item_type: "GraphQLApi"

  # =============================================================================
  # VARIABLE LIBRARY PARAMETERIZATION
  # =============================================================================

  # Environment-specific variable values
  - find_value: "VARIABLE_ENVIRONMENT_VALUE_PLACEHOLDER"
    replace_value:
      DEV: "development-value"
      STAGING: "staging-value"
      PROD: "production-value"
    item_type: "VariableLibrary"

  # Workspace ID replacement in variable libraries
  - find_value: "SOURCE_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "VariableLibrary"

  # =============================================================================
  # COPY JOB PARAMETERIZATION
  # =============================================================================

  # Source connection for copy jobs
  - find_value: "COPYJOB_SOURCE_CONNECTION_PLACEHOLDER"
    replace_value:
      DEV: "dev-source-connection-guid"
      STAGING: "staging-source-connection-guid"
      PROD: "prod-source-connection-guid"
    item_type: "CopyJob"

  # Destination reference for copy jobs
  - find_value: "COPYJOB_DESTINATION_PLACEHOLDER"
    replace_value:
      DEV: "$items.Lakehouse.DevCopyJobLakehouse.id"
      STAGING: "$items.Lakehouse.StagingCopyJobLakehouse.id"
      PROD: "$items.Lakehouse.ProdCopyJobLakehouse.id"
    item_type: "CopyJob"

  # =============================================================================
  # ADVANCED PARAMETERIZATION FOR ALL ITEM TYPES
  # =============================================================================

  # Universal workspace ID replacement across all item types
  - find_value: "UNIVERSAL_WORKSPACE_ID_PLACEHOLDER"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: ["Notebook", "DataPipeline", "Environment", "SemanticModel", "Report", 
                "Lakehouse", "Warehouse", "MirroredDatabase", "Eventhouse", "KQLDatabase", 
                "KQLQueryset", "KQLDashboard", "Eventstream", "Dataflow", "SQLDatabase", 
                "Reflex", "GraphQLApi", "VariableLibrary", "CopyJob"]

  # API Endpoint replacement - for items that connect to external APIs
  - find_value: "https://api.source-region.example.com"
    replace_value:
      DEV: "https://api.dev-region.example.com"
      STAGING: "https://api.staging-region.example.com" 
      PROD: "https://api.prod-region.example.com"
    item_type: ["Notebook", "DataPipeline", "GraphQLApi", "Dataflow"]

  # Advanced Regex: Lakehouse metadata in notebooks
  - find_value: '\#\s*META\s+"default_lakehouse":\s*"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"'
    replace_value:
      DEV: "$items.Lakehouse.MainLakehouse.id"
      STAGING: "$items.Lakehouse.MainLakehouse.id"
      PROD: "$items.Lakehouse.MainLakehouse.id"
    is_regex: "true"
    item_type: "Notebook"
    file_path: "**/notebook-content.py"

  # Advanced Regex: Workspace ID in notebook metadata
  - find_value: '\#\s*META\s+"default_lakehouse_workspace_id":\s*"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"'
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    is_regex: "true"
    item_type: "Notebook"

# =============================================================================
# KEY-VALUE REPLACEMENT PARAMETERIZATION - ALL ITEM TYPES
# =============================================================================
# Use for JSON/YAML files with specific key paths
# Uses JSONPath expressions to target specific configuration values

key_value_replace:
  # =============================================================================
  # DATA PIPELINE KEY-VALUE REPLACEMENTS
  # =============================================================================
  
  # Data Pipeline SQL Connection replacement
  - find_key: "$.properties.activities[?(@.name=='Copy Data')].typeProperties.source.datasetSettings.externalReferences.connection"
    replace_value:
      DEV: "dev-sql-connection-guid"
      STAGING: "staging-sql-connection-guid"
      PROD: "prod-sql-connection-guid"
    item_type: "DataPipeline"
    item_name: ["ETLPipeline", "DataIngestionPipeline"]

  # Data Pipeline destination lakehouse reference
  - find_key: "$.properties.activities[?(@.name=='Copy Data')].typeProperties.sink.datasetSettings.linkedService.properties.typeProperties.artifactId"
    replace_value:
      DEV: "$items.Lakehouse.TargetLakehouse.id"
      STAGING: "$items.Lakehouse.TargetLakehouse.id"
      PROD: "$items.Lakehouse.TargetLakehouse.id"
    item_type: "DataPipeline"

  # Data Pipeline workspace reference
  - find_key: "$.properties.activities[?(@.name=='Copy Data')].typeProperties.sink.datasetSettings.linkedService.properties.typeProperties.workspaceId"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "DataPipeline"

  # =============================================================================
  # SEMANTIC MODEL KEY-VALUE REPLACEMENTS
  # =============================================================================

  # Semantic Model data source connection
  - find_key: "$.model.dataSources[0].connectionDetails.address.server"
    replace_value:
      DEV: "dev-warehouse-server.database.windows.net"
      STAGING: "staging-warehouse-server.database.windows.net"
      PROD: "prod-warehouse-server.database.windows.net"
    item_type: "SemanticModel"

  # Semantic Model workspace reference
  - find_key: "$.workspaceId"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "SemanticModel"

  # =============================================================================
  # DATAFLOW KEY-VALUE REPLACEMENTS
  # =============================================================================

  # Dataflow query metadata connection reference
  - find_key: "$.connections[0].connectionId"
    replace_value:
      DEV: '{"ClusterId":"dev-cluster-id","DatasourceId":"dev-datasource-id"}'
      STAGING: '{"ClusterId":"staging-cluster-id","DatasourceId":"staging-datasource-id"}'
      PROD: '{"ClusterId":"prod-cluster-id","DatasourceId":"prod-datasource-id"}'
    item_type: "Dataflow"
    file_path: "**/queryMetadata.json"

  # Dataflow destination reference
  - find_key: "$.queries[0].outputEntityName"
    replace_value:
      DEV: "$items.Lakehouse.DevDataflowTarget.id"
      STAGING: "$items.Lakehouse.StagingDataflowTarget.id"
      PROD: "$items.Lakehouse.ProdDataflowTarget.id"
    item_type: "Dataflow"

  # =============================================================================
  # EVENTSTREAM KEY-VALUE REPLACEMENTS
  # =============================================================================

  # Eventstream source configuration
  - find_key: "$.properties.sources[0].sourceConfig.connectionString"
    replace_value:
      DEV: "dev-eventhub-connection-string"
      STAGING: "staging-eventhub-connection-string"
      PROD: "prod-eventhub-connection-string"
    item_type: "Eventstream"

  # Eventstream destination configuration
  - find_key: "$.properties.destinations[0].destinationConfig.workspaceId"
    replace_value:
      DEV: "$workspace.id"
      STAGING: "$workspace.id"
      PROD: "$workspace.id"
    item_type: "Eventstream"

  # =============================================================================
  # KQL QUERYSET KEY-VALUE REPLACEMENTS
  # =============================================================================

  # KQL Queryset database reference
  - find_key: "$.databaseId"
    replace_value:
      DEV: "$items.KQLDatabase.DevKQLDB.id"
      STAGING: "$items.KQLDatabase.StagingKQLDB.id"
      PROD: "$items.KQLDatabase.ProdKQLDB.id"
    item_type: "KQLQueryset"

  # =============================================================================
  # KQL DASHBOARD KEY-VALUE REPLACEMENTS
  # =============================================================================

  # KQL Dashboard data source reference
  - find_key: "$.dataSourceSettings.kqlDatabaseId"
    replace_value:
      DEV: "$items.KQLDatabase.DevKQLDB.id"
      STAGING: "$items.KQLDatabase.StagingKQLDB.id"
      PROD: "$items.KQLDatabase.ProdKQLDB.id"
    item_type: "KQLDashboard"

  # =============================================================================
  # MIRRORED DATABASE KEY-VALUE REPLACEMENTS
  # =============================================================================

  # Mirrored Database source connection
  - find_key: "$.sourceConnectionDetails.connectionString"
    replace_value:
      DEV: "dev-source-db-connection-string"
      STAGING: "staging-source-db-connection-string"
      PROD: "prod-source-db-connection-string"
    item_type: "MirroredDatabase"

  # =============================================================================
  # GRAPHQL API KEY-VALUE REPLACEMENTS
  # =============================================================================

  # GraphQL API data source reference
  - find_key: "$.dataSourceSettings.warehouseId"
    replace_value:
      DEV: "$items.Warehouse.DevGraphQLWarehouse.id"
      STAGING: "$items.Warehouse.StagingGraphQLWarehouse.id"
      PROD: "$items.Warehouse.ProdGraphQLWarehouse.id"
    item_type: "GraphQLApi"

  # GraphQL API external endpoint
  - find_key: "$.externalEndpoint.url"
    replace_value:
      DEV: "https://dev-api.example.com/graphql"
      STAGING: "https://staging-api.example.com/graphql"
      PROD: "https://prod-api.example.com/graphql"
    item_type: "GraphQLApi"

# =============================================================================
# SPARK POOL PARAMETERIZATION FOR ENVIRONMENTS
# =============================================================================
# Use for Environment items that reference custom Spark pools
# Note: fabric-cicd library manages workspace assignment automatically

spark_pool:
  # Production-grade large pool configuration for production environments
  - instance_pool_id: "SOURCE_LARGE_POOL_ID_PLACEHOLDER"
    replace_value:
      DEV:
        type: "Workspace"
        name: "DevPool_Small"
      STAGING:
        type: "Workspace"
        name: "StagingPool_Medium"
      PROD:
        type: "Workspace"  
        name: "ProdPool_Large"
    item_type: "Environment"
    item_name: ["ProductionEnvironment", "MLEnvironment"]

  # Development-optimized pool configuration
  - instance_pool_id: "SOURCE_MEDIUM_POOL_ID_PLACEHOLDER"
    replace_value:
      DEV:
        type: "Workspace"
        name: "DefaultPool"
      STAGING:
        type: "Workspace"
        name: "StagingPool_Medium"
      PROD:
        type: "Workspace"
        name: "ProdPool_Medium"
    item_type: "Environment"
    item_name: "DevEnvironment"

# =============================================================================
# CROSS-REGION DEPLOYMENT CONSIDERATIONS FOR ALL ITEM TYPES (v0.1.24)
# =============================================================================
# 
# When migrating ALL supported item types between regions, consider:
#
# 1. NOTEBOOKS & ENVIRONMENTS:
#    - Connection strings for external data sources may be region-specific
#    - Lakehouse and warehouse references need environment-specific IDs
#    - API endpoints and service URLs may differ by region
#    - Spark pool configurations and custom libraries are environment-specific
#
# 2. DATA PIPELINES & COPY JOBS:
#    - Source system connections are often region-dependent
#    - Target lakehouse/warehouse IDs must match the target environment
#    - External service endpoints may require region-specific configuration
#
# 3. SEMANTIC MODELS & REPORTS:
#    - Data source connections must point to correct region warehouses
#    - External database connections are typically region-specific
#    - Dataset refresh schedules may need environment-appropriate timing
#
# 4. REAL-TIME ANALYTICS (Eventhouse, KQLDatabase, KQLQueryset, KQLDashboard):
#    - Event source endpoints are typically region-specific
#    - KQL database and queryset references must match target environment
#    - Dashboard data source connections need environment-specific updates
#
# 5. STREAMING & EVENT PROCESSING (Eventstream, Reflex):
#    - Event Hub and streaming source connections are region-dependent
#    - Destination lakehouse/warehouse references must match target environment
#    - Real-time processing configurations may need regional optimization
#
# 6. DATA STORAGE & INTEGRATION (Lakehouse, Warehouse, MirroredDatabase, SQLDatabase):
#    - Storage account connections and endpoints are region-specific
#    - External database connections require region-appropriate configuration
#    - Mirrored database source connections need environment updates
#
# 7. DATAFLOWS & APIS (Dataflow, GraphQLApi):
#    - Source system connections are often region-dependent
#    - External API endpoints typically differ by region
#    - Output destinations must match target environment resources
#
# 8. CONFIGURATION & LIBRARIES (VariableLibrary):
#    - Environment-specific variable values need regional customization
#    - Library paths and configurations may be environment-dependent
#
# =============================================================================
# DYNAMIC REPLACEMENT VARIABLES FOR ALL ITEM TYPES (v0.1.24)
# =============================================================================
#
# fabric-cicd v0.1.24 supports these dynamic variables for all item types:
#
# CORE ITEM TYPES:
# NOTEBOOKS:
# - $workspace.id                               - Target workspace ID
# - $items.Lakehouse.<LakehouseName>.id        - Deployed lakehouse ID
# - $items.Warehouse.<WarehouseName>.id        - Deployed warehouse ID
# - $items.Environment.<EnvironmentName>.id    - Deployed environment ID
#
# DATA PIPELINES & COPY JOBS:
# - $workspace.id                               - Target workspace ID
# - $items.Lakehouse.<LakehouseName>.id        - Target lakehouse for pipeline
# - $items.Warehouse.<WarehouseName>.id        - Target warehouse for pipeline
# - $items.CopyJob.<CopyJobName>.id            - Referenced copy job ID
#
# ENVIRONMENTS:
# - $workspace.id                               - Target workspace ID
# - Environment-specific configurations are managed through spark_pool section
#
# SEMANTIC MODELS & REPORTS:
# - $workspace.id                               - Target workspace ID
# - $items.SemanticModel.<ModelName>.id        - Target semantic model/dataset
# - $items.Warehouse.<WarehouseName>.id        - Direct warehouse connections
# - $items.Report.<ReportName>.id              - Report reference ID
#
# DATA STORAGE TYPES:
# LAKEHOUSES & WAREHOUSES:
# - $workspace.id                               - Target workspace ID
# - $items.Lakehouse.<LakehouseName>.id        - Lakehouse ID
# - $items.Lakehouse.<LakehouseName>.sqlendpoint - Lakehouse SQL endpoint
# - $items.Warehouse.<WarehouseName>.id        - Warehouse ID
# - $items.Warehouse.<WarehouseName>.sqlendpoint - Warehouse SQL endpoint
#
# REAL-TIME ANALYTICS:
# EVENTHOUSE & KQL ITEMS:
# - $workspace.id                               - Target workspace ID
# - $items.Eventhouse.<EventhouseName>.id      - Eventhouse ID
# - $items.Eventhouse.<EventhouseName>.queryserviceuri - Eventhouse query URI
# - $items.KQLDatabase.<KQLDBName>.id          - KQL Database ID
# - $items.KQLQueryset.<QuerysetName>.id       - KQL Queryset ID
# - $items.KQLDashboard.<DashboardName>.id     - KQL Dashboard ID
#
# STREAMING & EVENTS:
# - $workspace.id                               - Target workspace ID
# - $items.Eventstream.<EventstreamName>.id    - Eventstream ID
# - $items.Reflex.<ReflexName>.id              - Reflex ID
#
# DATABASE TYPES:
# - $workspace.id                               - Target workspace ID
# - $items.MirroredDatabase.<MirroredDBName>.id - Mirrored Database ID
# - $items.SQLDatabase.<SQLDBName>.id          - SQL Database ID
#
# DATA PROCESSING:
# - $workspace.id                               - Target workspace ID
# - $items.Dataflow.<DataflowName>.id          - Dataflow ID
# - $items.GraphQLApi.<GraphQLApiName>.id      - GraphQL API ID
#
# CONFIGURATION:
# - $workspace.id                               - Target workspace ID
# - $items.VariableLibrary.<VariableLibName>.id - Variable Library ID
#
# =============================================================================
